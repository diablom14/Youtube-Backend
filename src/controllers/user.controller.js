import { asyncHandler } from "../utils/asyncHandler.js"
import { ApiError } from "../utils/apiError.js"
import { User } from "../models/user.model.js"
import { uploadOnCloudinary } from "../utils/cloudinary.js"
import { ApiResponse } from "../utils/apiResponse.js"
import jwt, { decode } from "jsonwebtoken"
import mongoose from "mongoose"

const generateAccessAndRefreshTokens = async (userId) => {
    const user = await User.findById(userId)

    const accessToken = user.generateAccessToken()
    const refreshToken = user.generateRefreshToken()

    user.refreshToken = refreshToken
    await user.save({ validateBeforeSave: false })

    return { accessToken, refreshToken }
}

const registerUser = asyncHandler(async (req, res) => {

    console.log(req);

    // get user details from frontend
    const { username, email, fullName, password } = req.body;

    // validation -  not empty
    if ([username, email, fullName, password]
        .some((field) => field.trim() === "")) {
        throw new ApiError(400, "All fields are required")
    }

    // check if user already exists: username, email

    const existedUser = await User.findOne({
        $or: [{ username }, { email }]
    })
    if (existedUser) {
        throw new ApiError(409, "User with email or username already exists")
    }

    // check for images, check for avatar
    console.log(req.files);

    const avatarLocalPath = req.files?.avatar[0]?.path
    const coverLocalPath = req.files?.coverImage?.[0]?.path

    console.log(coverLocalPath);

    if (!avatarLocalPath) {
        throw new ApiError(400, "Avatar File is required")
    }

    // upload them to cloudinary, avatar
    const avatar = await uploadOnCloudinary(avatarLocalPath)
    const coverImage = await uploadOnCloudinary(coverLocalPath)

    // console.log(coverImage);

    if (!avatar) {
        throw new ApiError(400, "Avatar File is required")
    }

    // create user object - create entry in db
    const user = await User.create({
        fullName,
        username: username.toLowerCase(),
        email,
        password,
        avatar: avatar.url,
        coverImage: coverImage?.url || "",
    })

    // remove password and refresh token field from response
    const createdUser = await User.findById(user._id).select(
        "-password -refreshToken"
    )

    // check for user creation
    if (!createdUser) return new ApiError(500, "User couldn't be registered")

    // return res
    return res.status(201).json(new
        ApiResponse(200, "User is successfully created")
    )
})

const loginUser = asyncHandler(async (req, res) => {
    // req body -> data
    const { username, email, password } = req.body

    // username or email
    if (!username && !email) {
        throw new ApiError(400, "Username or email is required.")
    }

    //find the user
    const user = await User.findOne({
        $or: [{ username }, { email }]
    })
    if (!user) {
        throw new ApiError(404, "User not found")
    }

    //password check
    const isPasswordCorrect = await user.isPasswordCorrect(password)
    if (!isPasswordCorrect) {
        throw new ApiError(404, "Invalid Credentials")
    }

    //access and referesh token
    const { accessToken, refreshToken } = await generateAccessAndRefreshTokens(user._id)

    const loggedInUser = await User.findById(user._id).select("-password -refreshToken")

    const options = {
        httpOnly: true,
        secure: true
    }

    //send cookie
    res
        .status(200)
        .cookie("accessToken", accessToken, options)
        .cookie("refreshToken", refreshToken, options)
        .json(new ApiResponse(200, {
            user: { loggedInUser, accessToken, refreshToken }
        },
            "User is successfully logged In"
        ))
})

const logoutUser = asyncHandler(async (req, res) => {
    await User.findByIdAndUpdate(
        req.user._id,
        {
            $unset: {
                refreshToken: 1
            }
        },
        {
            new: true
        }
    )

    const options = {
        httpOnly: true,
        secure: true
    }

    res
        .status(200)
        .clearCookie("accessToken", options)
        .clearCookie("refreshToken", options)
        .json(
            new ApiResponse(200, {}, "User logged out successfully")
        )
})

const refreshAccessToken = asyncHandler(async (req, res) => {
    // Get the refresh token from client cookies
    const incomingRefreshToken = 
        req.cookies.refreshToken ||
        req.body.refreshToken

    if(!incomingRefreshToken)
    {
        throw new ApiError(401, "User doesn't have a refresh token")
    }
    // verify if its a token generated by our jwt and decode it
    const decodedToken = jwt.verify(incomingRefreshToken, process.env.REFRESH_TOKEN_SECRET)
    if(!decodedToken)
    {
        throw new ApiError(401, "Invalid refresh token")
    }

    // verify whether it is equal to the refresh token 
    // we have with the user in the data base

    const user = await User.findById(decodedToken._id)
    if(incomingRefreshToken !== user.refreshToken)
    {
        throw new ApiError(401, "Refresh token expired or used")
    }

    // generate new refresh and access tokens
    const {accessToken, refreshToken} = await generateAccessAndRefreshTokens(user._id)

    // send response along with cookies

    const options = {
        httpOnly:true,
        secure:true
    }

    res
    .status(200)
    .cookie("accessToken", accessToken, options)
    .cookie("refreshToken", refreshToken, options)
    .json(
        new ApiResponse(200, "Access token successfully generated")
    )
})

const changePassword = asyncHandler(async (req, res)=>{
    // Take old password and new password from user 
    const {oldPassword, newPassword} = req.body;

    // check if the old password is same as in our database (auth middle ware)
    const user = await User.findById(req.user._id)
    const isPasswordCorrect = await user.isPasswordCorrect(oldPassword)
    if(!isPasswordCorrect)
    {
        throw new ApiError(400, "Enter correct old password")
    }
    
    // change the current password to new password in the database and save
    user.password = newPassword
    user.save({ validateBeforeSave:false })

    // send response
    res
    .status(200)
    .json(new ApiResponse(200, {}, "Password is successfully changed"))
})

const getCurrentUser = asyncHandler(async(req, res)=>{
    res
    .status(200)
    .json(new ApiResponse(
        200,
        req.user,
        "User is successfully fetched"
    ))
})

const updateAccountDetails = asyncHandler(async (req, res)=>{
    // Take the update fields
    const {fullName, email} = req.body;

    // find user by id using auth middleware and update it
    const user = await User.findByIdAndUpdate(
        req.user._id,
        {
            $set: {
                fullName: fullName,
                email: email
            }
        },
        {new:true}
    ).select("-password")

    // send response
    res
    .status(200)
    .json(
        new ApiResponse(
            200,
            user,
            "Account details successfully updated"
        )
    )
})

const updateAvatar = asyncHandler(async (req, res)=>{
    // get file using multer
    const avatarLocalPath = req.file?.avatar
    if(!avatarLocalPath)
    {
        throw new ApiError(400, "File has not been uploaded successfully")
    }

    // upload on cloudinary
    const avatar = await uploadOnCloudinary(avatarLocalPath)
    if(!avatar.url)
    {
        throw new ApiError(500, "Couldn't upload on cloudinary")
    }

    // update the user
    const user = await User.findByIdAndUpdate(
        req.user._id,
        {
            $set:
            {
                avatar: avatar.url    
            }
        },
        {
            new:true
        }
    ).select("-password")
    
    // send response
    res
    .status(200)
    .json(new ApiResponse(
        200,
        user,
        "Avatar is successfully updated"
    ))
})

const updateCoverImage = asyncHandler(async (req, res)=>{
    // get file using multer
    const coverImageLocalPath = req.file?.coverImage
    if(!coverImageLocalPath)
    {
        throw new ApiError(400, "File has not been uploaded successfully")
    }

    // upload on cloudinary
    const coverImage = await uploadOnCloudinary(coverImageLocalPath)
    if(!coverImage.url)
    {
        throw new ApiError(500, "Couldn't upload on cloudinary")
    }

    // update the user
    const user = await User.findByIdAndUpdate(
        req.user._id,
        {
            $set:
            {
                coverImage: coverImage.url    
            }
        },
        {
            new:true
        }
    ).select("-password")
    
    // send response
    res
    .status(200)
    .json(new ApiResponse(
        200,
        user,
        "coverImage is successfully updated"
    ))
})

const getUserChannelProfile = asyncHandler(async (req, res)=>{
    // get username 
    const {username} = req.params
    if(!username)
    {
        throw new ApiError(400, "Username is not available to get user channel profile")
    }
    // group data for the username and aggregate for subscriber
    const channel = await User.aggregate([
        {
            $match:username.toLowerCase()
        },
        {
            $lookup:{
                from: "subscriptions",
                localField: "_id",
                foreignField: "channel",
                as:"subscribers"
            }
        },
        {
            $lookup:{
                from: "subscriptions",
                localField: "_id",
                foreignField: "subscriber",
                as:"subscribedTo"
            }
        },
        {
            $addFields:{
                subscribersCount : {
                    $size: "$subscribers"
                },
                subscribedToCount:{
                   $size:  "$subscribedTo"
                },
                isSubscribed:{
                    $cond:{
                        if: req.user._id == "$subscribers.subscriber",
                        then: true,
                        else: false
                    }
                }
            }
        },

        {
            $project:
            {
                fullName:1,
                username:1,
                avatar:1,
                coverImage:1,
                subscribersCount:1,
                subscribedToCount:1,
                isSubscribed:1
            }
        }
    ])
    
    
    // and subscribed count
    // Project only the values needed for front end 
    // send response

    console.log(channel);
    
    res
    .status(200)
    .json(
        new ApiResponse(200, channel[0], "Channel data successfully fetched")
    )
})

const getUserWatchHistory = asyncHandler(async(req, res)=>{
    const user = await User.aggregate([
        {
            $match: new mongoose.Types.ObjectId(req.user._id)
        },
        {
            $lookup:{
                from: "videos",
                localField:"watchHistory",
                foreignField:"_id",
                as:"watchHistory",
                pipeline:[
                    {
                        $lookup:{
                            from:"users",
                            localField:"owner",
                            foreignField:"_id",
                            as:"owner"
                        }
                    },
                    {
                        $project:
                        {
                            username:1,
                            fullName:1,
                            avatar:1   
                        }
                    },
                    {
                        $addFields:{
                            owner:{
                                $first:"$owner"
                            }
                        }
                    }
                ]
            }
        }
    ])

    res
    .status(200)
    .json(
        new ApiResponse(200, user[0].watchHistory, "User watch history fetched successfully")
    )
})

export {
    registerUser,
    loginUser,
    logoutUser,
    refreshAccessToken,
    changePassword,
    getCurrentUser,
    updateAccountDetails,
    updateAvatar,
    updateCoverImage,
    getUserChannelProfile,
    getUserWatchHistory
}